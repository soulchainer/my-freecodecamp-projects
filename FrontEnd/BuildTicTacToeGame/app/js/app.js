"use strict";function _toConsumableArray(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}var _slicedToArray=function(){function t(t,r){var e=[],n=!0,a=!1,i=void 0;try{for(var o,l=t[Symbol.iterator]();!(n=(o=l.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(u){a=!0,i=u}finally{try{!n&&l["return"]&&l["return"]()}finally{if(a)throw i}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}();!function(){function t(t){var r=t[0];return r!==e?t.every(function(t){return t===r}):void 0}function r(){var t=new i;t.start()}var e="*",n=100,a=function(){function t(){_classCallCheck(this,t),this.squares=Array(9).fill(e)}return _createClass(t,[{key:"draw",value:function(){var t="",r=!0,e=!1,n=void 0;try{for(var a,i=this.squares.entries()[Symbol.iterator]();!(r=(a=i.next()).done);r=!0){var o=_slicedToArray(a.value,2),l=o[0],u=o[1];t+=l%3?u:"\n"+u}}catch(s){e=!0,n=s}finally{try{!r&&i["return"]&&i["return"]()}finally{if(e)throw n}}console.log(t)}},{key:"makeMove",value:function(t,r){this.squares[t]=r}},{key:"undoMove",value:function(t){this.makeMove(t,e)}}]),t}(),i=function(){function r(){_classCallCheck(this,r),this.board=new a,this.rival={O:"X",X:"O"},this.turn=0,this.lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]}return _createClass(r,[{key:"reset",value:function(){this.constructor()}},{key:"getValidMoves",value:function(){var t=this.board.squares,r=function(r,n){return t[n]===e};return[].concat(_toConsumableArray(t.keys())).filter(r.bind(this))}},{key:"isGameOver",value:function(){return this.getWinner()||!this.getValidMoves().length}},{key:"getWinner",value:function(){var r=this,e=!0,n=!1,a=void 0;try{for(var i,o=this.lines[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var l=i.value,u=l.map(function(t){return r.board.squares[t]});if(t(u))return u[0]}}catch(s){n=!0,a=s}finally{try{!e&&o["return"]&&o["return"]()}finally{if(n)throw a}}return null}},{key:"evalFinalState",value:function(t,r){var e=this.getWinner();return e===t?n-r:e===this.rival[t]?-n+r:0}},{key:"continueGame",value:function(t,r){if(this.isGameOver()){this.board.draw();var e=this.getWinner();console.log(e?"Player "+e+" won.":"It was a tie."),this.reset(),this.start()}else r.bind(this)(this.rival[t])}},{key:"minimax",value:function(t,r){var e=void 0,a=void 0,i=-n,o=!0,l=!1,u=void 0;try{for(var s,v=this.getValidMoves()[Symbol.iterator]();!(o=(s=v.next()).done);o=!0){var h=s.value;a=this.minValue(h,r,this.rival[t],-n,n),a>i&&(i=a,e=h)}}catch(c){l=!0,u=c}finally{try{!o&&v["return"]&&v["return"]()}finally{if(l)throw u}}return e}},{key:"maxValue",value:function(t,r,e,n,a){try{if(this.board.makeMove(t,e),this.isGameOver())return this.evalFinalState(e,r);var i=!0,o=!1,l=void 0;try{for(var u,s=this.getValidMoves()[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var v=u.value;if(n=Math.max(n,this.minValue(v,r+1,this.rival[e],n,a)),n>=a)return a}}catch(h){o=!0,l=h}finally{try{!i&&s["return"]&&s["return"]()}finally{if(o)throw l}}return n}finally{this.board.undoMove(t)}}},{key:"minValue",value:function(t,r,e,n,a){try{if(this.board.makeMove(t,e),this.isGameOver())return this.evalFinalState(e,r);var i=!0,o=!1,l=void 0;try{for(var u,s=this.getValidMoves()[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var v=u.value;if(a=Math.min(a,this.maxValue(v,r+1,this.rival[e],n,a)),n>=a)return n}}catch(h){o=!0,l=h}finally{try{!i&&s["return"]&&s["return"]()}finally{if(o)throw l}}return a}finally{this.board.undoMove(t)}}},{key:"cpuPlayer",value:function(t){console.time("cpu move"),this.board.draw();var r=void 0;r=this.turn?this.minimax(t,this.turn):Math.floor(Math.random()*this.getValidMoves().length),console.log("Cpu moves "+r),console.timeEnd("cpu move"),this.board.makeMove(r,t),this.continueGame(t,this.humanPlayer)}},{key:"humanPlayer",value:function(t){function r(){console.log("Moves available: "+e);var t=Number(prompt("Give me your move: "));return-1!==e.indexOf(t)?t:(console.log(t+" isn't a valid move. Try again."),r())}this.turn++,console.log("Turn "+this.turn),this.board.draw();var e=this.getValidMoves(),n=r();this.board.makeMove(n,t),this.continueGame(t,this.cpuPlayer)}},{key:"start",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"cpu":arguments[0],r=arguments.length<=1||void 0===arguments[1]?"X":arguments[1];"cpu"===t?this.cpuPlayer(r):this.humanPlayer(r)}}]),r}();r()}();
//# sourceMappingURL=app.js.map
