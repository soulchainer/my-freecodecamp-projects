"use strict";function _toConsumableArray(r){if(Array.isArray(r)){for(var t=0,e=Array(r.length);t<r.length;t++)e[t]=r[t];return e}return Array.from(r)}function _classCallCheck(r,t){if(!(r instanceof t))throw new TypeError("Cannot call a class as a function")}var _slicedToArray=function(){function r(r,t){var e=[],n=!0,a=!1,i=void 0;try{for(var o,l=r[Symbol.iterator]();!(n=(o=l.next()).done)&&(e.push(o.value),!t||e.length!==t);n=!0);}catch(u){a=!0,i=u}finally{try{!n&&l["return"]&&l["return"]()}finally{if(a)throw i}}return e}return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return r(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function r(r,t){for(var e=0;e<t.length;e++){var n=t[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}}();!function(){function r(r){var t=r[0];return t!==e?r.every(function(r){return r===t}):void 0}function t(){var r=new i;r.start()}var e="*",n=10,a=function(){function r(){_classCallCheck(this,r),this.squares=Array(9).fill(e)}return _createClass(r,[{key:"draw",value:function(){var r="",t=!0,e=!1,n=void 0;try{for(var a,i=this.squares.entries()[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=_slicedToArray(a.value,2),l=o[0],u=o[1];r+=l%3?u:"\n"+u}}catch(s){e=!0,n=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(e)throw n}}console.log(r)}},{key:"makeMove",value:function(r,t){this.squares[r]=t}},{key:"undoMove",value:function(r){this.makeMove(r,e)}}]),r}(),i=function(){function t(){_classCallCheck(this,t),this.board=new a,this.rival={O:"X",X:"O"},this.turn=0,this.lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]}return _createClass(t,[{key:"getValidMoves",value:function(){var r=this.board.squares,t=function(t,n){return r[n]===e};return[].concat(_toConsumableArray(r.keys())).filter(t.bind(this))}},{key:"isGameOver",value:function(){return this.getWinner()||!this.getValidMoves().length}},{key:"getWinner",value:function(){var t=this,e=!0,n=!1,a=void 0;try{for(var i,o=this.lines[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var l=i.value,u=l.map(function(r){return t.board.squares[r]});if(r(u))return u[0]}}catch(s){n=!0,a=s}finally{try{!e&&o["return"]&&o["return"]()}finally{if(n)throw a}}return null}},{key:"evalFinalState",value:function(r,t){var e=this.getWinner();return e===r?n-t:e===this.rival[r]?-n+t:0}},{key:"continueGame",value:function(r,t){if(this.isGameOver()){this.board.draw();var e=this.getWinner();console.log(e?"Player "+e+" won.":"It was a tie.")}else t.bind(this)(this.rival[r])}},{key:"minimax",value:function(r,t){var e=void 0,a=void 0,i=-n,o=!0,l=!1,u=void 0;try{for(var s,v=this.getValidMoves()[Symbol.iterator]();!(o=(s=v.next()).done);o=!0){var h=s.value;a=this.minValue(h,t,this.rival[r]),a>i&&(i=a,e=h)}}catch(c){l=!0,u=c}finally{try{!o&&v["return"]&&v["return"]()}finally{if(l)throw u}}return e}},{key:"maxValue",value:function(r,t,e){try{if(this.board.makeMove(r,e),this.isGameOver())return this.evalFinalState(e,t);var a=-n,i=!0,o=!1,l=void 0;try{for(var u,s=this.getValidMoves()[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var v=u.value;a=Math.max(a,this.minValue(v,t+1,this.rival[e]))}}catch(h){o=!0,l=h}finally{try{!i&&s["return"]&&s["return"]()}finally{if(o)throw l}}return a}finally{this.board.undoMove(r)}}},{key:"minValue",value:function(r,t,e){try{if(this.board.makeMove(r,e),this.isGameOver())return this.evalFinalState(e,t);var a=n,i=!0,o=!1,l=void 0;try{for(var u,s=this.getValidMoves()[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var v=u.value;a=Math.min(a,this.maxValue(v,t+1,this.rival[e]))}}catch(h){o=!0,l=h}finally{try{!i&&s["return"]&&s["return"]()}finally{if(o)throw l}}return a}finally{this.board.undoMove(r)}}},{key:"cpuPlayer",value:function(r){console.time("cpu move"),this.board.draw();var t=void 0;t=this.turn?this.minimax(r,this.turn):Math.floor(Math.random()*this.getValidMoves().length),console.log("Cpu moves "+t),console.timeEnd("cpu move"),this.board.makeMove(t,r),this.continueGame(r,this.humanPlayer)}},{key:"humanPlayer",value:function(r){function t(){console.log("Moves available: "+e);var r=Number(prompt("Give me your move: "));return-1!==e.indexOf(r)?r:(console.log(r+" isn't a valid move. Try again."),t())}this.turn++,console.log("Turn "+this.turn),this.board.draw();var e=this.getValidMoves(),n=t();this.board.makeMove(n,r),this.continueGame(r,this.cpuPlayer)}},{key:"start",value:function(){var r=arguments.length<=0||void 0===arguments[0]?"cpu":arguments[0],t=arguments.length<=1||void 0===arguments[1]?"X":arguments[1];"cpu"===r?this.cpuPlayer(t):this.humanPlayer(t)}}]),t}();t()}();
//# sourceMappingURL=app.js.map
