{"version":3,"sources":["app.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","threeInARow","row","token","EMPTY","every","element","game","ttt","TicTacToe","start","TOP","Board","this","squares","fill","board","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","_step$value","index","console","log","move","player","makeMove","rival","O","X","turn","lines","emptySquare","concat","keys","filter","bind","getWinner","getValidMoves","_this","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","line","map","depth","winner","playerFunction","isGameOver","draw","bestMove","currentMax","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","minValue","α","β","evalFinalState","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_move","Math","undoMove","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_move2","min","maxValue","time","minimax","floor","random","timeEnd","continueGame","humanPlayer","askMove","validMoves","Number","prompt","indexOf","cpuPlayer","playerOne","arguments"],"mappings":"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","file":"app.js","sourcesContent":["(function(){\n    const EMPTY = '*';\n    const X = 'X';\n    const O = 'O';\n    const TOP = 100;\n\n    function threeInARow(row) { // return true if all row elements are equal\n        let token = row[0];\n        if (token !== EMPTY) {\n            return row.every(element => element === token);\n        }\n    }\n\n    class Board {\n        constructor() { // initialize the board\n            this.squares = Array(9).fill(EMPTY);\n        }\n\n        draw() { // draw the game board\n            let board = '';\n            for (let [index, value] of this.squares.entries()) {\n                board += (index % 3)? value: `\\n${value}`;\n            }\n            console.log(board);\n        }\n\n        makeMove(move, player) { // make a move\n            this.squares[move] = player;\n        }\n\n        undoMove(move) { // undo a move\n            this.makeMove(move, EMPTY);\n        }\n    }\n\n    class TicTacToe {\n        constructor() {\n            this.board = new Board();\n            this.rival = {'O': 'X', 'X': 'O'};\n            this.turn = 0;\n            this.lines= [[0,1,2], [3,4,5], [6,7,8], // vertical\n                        [0,3,6], [1,4,7], [2,5,8], // horizontal\n                        [0,4,8],[2,4,6]];          // diagonal\n        }\n\n        getValidMoves() { // return valid moves still available (empty) in board\n            let squares = this.board.squares;\n            let emptySquare = function(element, index) {\n                return squares[index] === EMPTY;\n            };\n            return [...squares.keys()].filter(emptySquare.bind(this));\n        }\n\n        isGameOver() { // return true if game ended (someone won or board full)\n            return this.getWinner() || !this.getValidMoves().length;\n        }\n\n        getWinner() { // return the winner: X, O  or null (tie)\n            for (let line of this.lines) {\n                let row = line.map(element => this.board.squares[element]);\n                if (threeInARow(row)) {\n                    return row[0];\n                }\n            }\n            return null;\n        }\n\n        evalFinalState(player, depth) {\n        // eval state at the end of the game for player\n        // 0 is a tie, positive values, winner states and negative, loser ones\n        // A status value depends of the depth when you reach it: a winner\n        // status reached sooner is better than one reached later\n        // If we don't have depth into account, cpu plays awfully\n            let winner = this.getWinner();\n            if (winner === player) {\n                return TOP - depth;\n            } else if (winner === this.rival[player]) {\n                return -TOP + depth;\n            }\n            return 0;\n        }\n\n        continueGame(player, playerFunction) {\n        // check if the game continues or not\n        // if game can continue, run the next player turn\n        // if not, draw the final status of the game\n            if (this.isGameOver()) {\n                this.board.draw();\n                let winner = this.getWinner();\n                console.log((winner)? `Player ${winner} won.`: 'It was a tie.');\n            } else {\n                playerFunction.bind(this)(this.rival[player]);\n            }\n        }\n\n        minimax(player, depth) {\n        // return the best move to do from the actual game state\n        // use alpha-beta pruning algorithm, an improvement of minimax one\n            let bestMove,\n                currentMax,\n                max = -TOP;\n            for (let move of this.getValidMoves()) {\n                currentMax = this.minValue(move, depth, this.rival[player],\n                                           -TOP, TOP);\n                if (currentMax > max) {\n                    max = currentMax;\n                    bestMove = move;\n                }\n            }\n            return bestMove;\n        }\n\n        maxValue(move, depth, player, α, β) {\n        // maximizer function\n        // return a integer with the calculated value of the best\n        // situation that «move» could lead the player\n        // Bigger value means more chance to win\n            try {\n                this.board.makeMove(move, player);\n                if (this.isGameOver()) {\n                    return this.evalFinalState(player, depth);\n                }\n                for (let move of this.getValidMoves()) {\n                    α = Math.max(α,\n                                 this.minValue(move, depth + 1,\n                                               this.rival[player], α, β));\n                    if (α >= β) {\n                        return β;\n                    }\n                }\n                return α;\n            }\n            finally {\n                this.board.undoMove(move);\n            }\n        }\n\n        minValue(move, depth, player, α, β) {\n        // minimizer function\n        // return a integer with the calculated value of the best\n        // situation that «move» could lead to rival\n        // Smaller value means more chance to win for the rival\n        // (and more chance to lose to the player)\n            try {\n                this.board.makeMove(move, player);\n                if (this.isGameOver()) {\n                    return this.evalFinalState(player, depth);\n                }\n                for (let move of this.getValidMoves()) {\n                    β = Math.min(β,\n                                 this.maxValue(move, depth + 1,\n                                               this.rival[player], α, β));\n                    if (α >= β) {\n                        return α;\n                    }\n                }\n                return β;\n            }\n            finally {\n                this.board.undoMove(move);\n            }\n        }\n\n        cpuPlayer(player) { // run cpu player turn\n            console.time('cpu move');\n            this.board.draw();\n            let move;\n            if (this.turn) {\n                move = this.minimax(player, this.turn);\n            } else {\n                move = Math.floor(Math.random() * this.getValidMoves().length);\n            }\n            console.log(`Cpu moves ${move}`);\n            console.timeEnd('cpu move');\n            this.board.makeMove(move, player);\n\n            this.continueGame(player, this.humanPlayer);\n        }\n\n        humanPlayer(player) { // run human player turn\n            this.turn++;\n            console.log(`Turn ${this.turn}`);\n            this.board.draw();\n            let validMoves = this.getValidMoves();\n\n            function askMove() { // print moves available\n                console.log(`Moves available: ${validMoves}`);\n                // ask player for their next move\n                let move = Number(prompt('Give me your move: '));\n\n                if (validMoves.indexOf(move) !== -1) {\n                    return move;\n                }\n                console.log(`${move} isn't a valid move. Try again.`);\n                return askMove();\n            }\n\n            let move = askMove();\n            this.board.makeMove(move, player);\n            this.continueGame(player, this.cpuPlayer);\n        }\n\n        start(playerOne='cpu', token='X') { // start the game\n            if (playerOne === 'cpu') {\n                this.cpuPlayer(token);\n            } else {\n                this.humanPlayer(token);\n            }\n        }\n    }\n\n\n    function game(){\n        let ttt = new TicTacToe();\n        ttt.start();\n    }\n\n    game();\n})();"],"sourceRoot":"/source/"}