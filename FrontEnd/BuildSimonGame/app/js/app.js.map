{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","simon","playingMusicButton","playing","classList","add","unpressButton","unpressed","remove","onSoundLoaded","id","snds","cs","createInstance","snd","on","musicBtns","getTurns","self","mode","Infinity","getRandomTap","String","Math","floor","random","processFunctionButton","target","started","resetGame","start","strict","strictBtn","strictLabel","textContent","modes","modeLabel","turns","enableMusicBtns","hasAttribute","removeAttribute","disableMusicBtns","setAttribute","togglePower","status","powerBtn","_arr2","startBtn","modesBtn","_i2","btn","addEventListener","stopGame","musicTapError","playerMiss","turn","window","setTimeout","cpuTurn","processMusicTap","tapped","getAttribute","play","taps","currentPlayerTap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","value","removeEventListener","err","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","updateLed","arguments","led","baseReset","clearInterval","cpuInterval","stop","forEach","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_arr3","_i3","_arr","_i","document","getElementById","assetPath","sounds","src","createjs","Sound","alternateExtensions","registerSounds","this","tap","playerTurn","gameEnded","push","setInterval","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\n(function () {\n  // all the logic of the game\n  var simon = function simon() {\n    // get the music buttons\n    var musicBtns = [];\n    var _arr = [0, 1, 2, 3];\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var i = _arr[_i];\n      musicBtns[i] = document.getElementById(\"tap\" + i);\n    }\n    // create and load the sounds\n    var assetPath = \"/assets/audio/\";\n    var sounds = [{ id: \"0\", src: \"tap0.ogg\" }, { id: \"1\", src: \"tap1.ogg\" }, { id: \"2\", src: \"tap2.ogg\" }, { id: \"3\", src: \"tap3.ogg\" }];\n    var cs = createjs.Sound;\n    cs.alternateExtensions = [\"mp3\"];\n    cs.on(\"fileload\", onSoundLoaded);\n    cs.registerSounds(sounds, assetPath);\n    var snds = [];\n    // get the option/action buttons\n    var powerBtn = document.getElementById('power');\n    var startBtn = document.getElementById('start');\n    var strictBtn = document.getElementById('strict');\n    var modesBtn = document.getElementById('modes');\n    // get the elements of the page, for show/change info\n    var led = document.getElementById('led');\n    var modeLabel = document.getElementById('mode-label');\n    var strictLabel = document.getElementById('strict-label');\n    var status = document.getElementById('status');\n\n    // game modes available: «Normal» (20 moves to win) and «No limit»\n    // (play till you want)\n    var modes = [\"Normal\", \"No limit\"];\n    powerBtn.addEventListener('click', togglePower);\n    var self = this;\n    // reference to the interval used by the cpu for play the tap series\n    // needed to stop the playing in any moment\n    this.cpuInterval = null;\n    this.on = false; // Is the Simon device turned on?\n    this.mode = 0; // actual mode game (index of «modes» array)\n    this.strict = false; // additive mode: after an user mistake, game resets\n    this.started = false; // is the game started?\n    this.turn = 0; // turn being played\n    this.turns = getTurns(); // total turns of the game\n    this.start = function () {\n      // start the game, when pressed «start»\n      modesBtn.removeEventListener('click', processFunctionButton);\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.taps = []; // storage of the moves played\n    this.currentPlayerTap = null; // last music button pressed by the user\n    this.playerMiss = false; // the user has made a mistake\n    this.cpuTurn = function () {\n      // process the cpu turn\n      self.turn++;\n      if (!self.gameEnded()) {\n        status.textContent = \"CPU turn\";\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n          updateLed(self.turn);\n        }\n        self.playerMiss = false;\n        var tap = 0;\n        musicBtns.forEach(disableMusicBtns);\n        // interval that plays the actual serie of buttons\n        self.cpuInterval = window.setInterval(play, 600, self.cpuInterval);\n      } else {\n        status.textContent = \"YOU WIN!!\";\n        return;\n      }\n      function play() {\n        // play a music button\n        snds[self.taps[tap]].play();\n        tap++;\n        if (tap >= self.turn) {\n          window.clearInterval(self.cpuInterval);\n          self.cpuInterval = null;\n          window.setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function () {\n      // process the player turn\n      status.textContent = \"Your turn\";\n      musicBtns.forEach(enableMusicBtns);\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = musicBtns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var btn = _step.value;\n\n          btn.addEventListener('click', processMusicTap);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n    this.gameEnded = function () {\n      // return true if game ends, false otherwise\n      return self.turn > self.turns;\n    };\n\n    // helper functions\n    function playingMusicButton(e) {\n      // what to do when music of button starts\n      function playing() {\n        e.classList.add('pushed');\n      }\n      return playing;\n    }\n    function unpressButton(e) {\n      // what to do when music of button ends\n      function unpressed() {\n        e.classList.remove('pushed');\n      }\n      return unpressed;\n    }\n    function unpressed(e) {\n      e.classList.remove('pushed');\n    }\n    function onSoundLoaded(e) {\n      // run when all sounds are ready\n      var id = e.id;\n      snds[id] = cs.createInstance(id);\n      var snd = snds[id];\n      snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n      snd.on(\"complete\", unpressButton(musicBtns[id]));\n    }\n    function getTurns() {\n      // return total turns to play, according to game mode\n      return self.mode === 0 ? 20 : Infinity;\n    }\n    function getRandomTap() {\n      // return random button to tap next (number 0-3)\n      return String(Math.floor(Math.random() * 4));\n    }\n    function processFunctionButton(e) {\n      // execute action related to pushed btn\n      switch (e.target.id) {\n        case 'start':\n          if (self.started) {\n            resetGame();\n          } else {\n            self.start();\n          }\n          break;\n        case 'strict':\n          if (self.strict) {\n            self.strict = false;\n            strictBtn.classList.remove('pushed');\n            strictLabel.textContent = \"\";\n          } else {\n            self.strict = true;\n            strictBtn.classList.add('pushed');\n            strictLabel.textContent = \"(Strict)\";\n          }\n          break;\n        default:\n          self.mode = self.mode === modes.length - 1 ? 0 : self.mode + 1;\n          modeLabel.textContent = modes[self.mode];\n          self.turns = getTurns();\n      }\n    }\n    function enableMusicBtns(e) {\n      // enable music buttons (could be clicked)\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n      }\n    }\n    function disableMusicBtns(e) {\n      // disable music buttons\n      if (!e.hasAttribute('disabled')) {\n        e.setAttribute('disabled', 'true');\n      }\n    }\n    function togglePower(e) {\n      // toggle power button ON/OFF\n      self.on = self.on ? false : true;\n      if (self.on) {\n        status.textContent = \"On\";\n        powerBtn.classList.add('right');\n        var _arr2 = [startBtn, strictBtn, modesBtn];\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var btn = _arr2[_i2];\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        status.textContent = \"Off\";\n        powerBtn.classList.remove('right');\n        stopGame();\n      }\n    }\n    function musicTapError() {\n      // what to do when user make a mistake\n      status.textContent = \"YOU MISS!!\";\n      if (self.strict) {\n        resetGame();\n      } else {\n        self.playerMiss = true;\n        self.turn--;\n        window.setTimeout(self.cpuTurn, 200);\n      }\n    }\n    function processMusicTap(e) {\n      // process the tap of a music button\n      var tapped = e.target.getAttribute(\"data-btn\");\n      var snd = snds[tapped];\n      snd.play();\n      snd.on('complete', function () {\n        if (tapped === self.taps[self.currentPlayerTap]) {\n          self.currentPlayerTap++;\n          if (self.currentPlayerTap === self.turn) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = musicBtns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var btn = _step2.value;\n\n                btn.removeEventListener('click', processMusicTap);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            window.setTimeout(self.cpuTurn, 200);\n          }\n        } else {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = musicBtns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var btn = _step3.value;\n\n              btn.removeEventListener('click', processMusicTap);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          musicTapError();\n        }\n      }, null, true);\n    }\n    function updateLed() {\n      var value = arguments.length <= 0 || arguments[0] === undefined ? \"--\" : arguments[0];\n      // update the led value\n      led.textContent = value;\n    }\n    function baseReset() {\n      // prepare the device for a reset (or power off)\n      window.clearInterval(self.cpuInterval);\n      self.cpuInterval = null;\n      cs.stop();\n      musicBtns.forEach(unpressed);\n      // remove music buttons listeners on reset, to avoid duplicity\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = musicBtns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var btn = _step4.value;\n\n          btn.removeEventListener('click', processMusicTap);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      updateLed();\n      self.turn = 0;\n      self.taps = [];\n      self.currentPlayerTap = null;\n      self.playerMiss = false;\n    }\n    function stopGame() {\n      // stop (and power off) the device\n      baseReset();\n      var _arr3 = [startBtn, strictBtn];\n      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n        var btn = _arr3[_i3];\n        btn.removeEventListener('click', processFunctionButton);\n      }\n      self.on = false;\n      self.started = false;\n      modesBtn.addEventListener('click', processFunctionButton);\n    }\n    function resetGame() {\n      // restart the game, with a new sequence of sounds\n      baseReset();\n      self.on = true;\n      self.start();\n    }\n  };\n\n  // launch the game\n  var simonGame = new simon();\n})();\n\n},{}]},{},[1])\n\n","(function(){\n  // all the logic of the game\n  var simon = function() {\n    // get the music buttons\n    var musicBtns = [];\n    for (let i of [0,1,2,3]) {\n      musicBtns[i] = document.getElementById(\"tap\"+i);\n    }\n    // create and load the sounds\n    var assetPath = \"/assets/audio/\";\n    var sounds = [\n      {id: \"0\", src: \"tap0.ogg\"},\n      {id: \"1\", src: \"tap1.ogg\"},\n      {id: \"2\", src: \"tap2.ogg\"},\n      {id: \"3\", src: \"tap3.ogg\"}\n    ];\n    var cs = createjs.Sound;\n    cs.alternateExtensions = [\"mp3\"];\n    cs.on(\"fileload\", onSoundLoaded);\n    cs.registerSounds(sounds, assetPath);\n    var snds = [];\n    // get the option/action buttons\n    var powerBtn = document.getElementById('power');\n    var startBtn = document.getElementById('start');\n    var strictBtn = document.getElementById('strict');\n    var modesBtn = document.getElementById('modes');\n    // get the elements of the page, for show/change info\n    var  led = document.getElementById('led');\n    var modeLabel = document.getElementById('mode-label');\n    var strictLabel = document.getElementById('strict-label');\n    var status = document.getElementById('status');\n\n    // game modes available: «Normal» (20 moves to win) and «No limit»\n    // (play till you want)\n    var modes = [\"Normal\", \"No limit\"];\n    powerBtn.addEventListener('click', togglePower);\n    var self = this;\n    // reference to the interval used by the cpu for play the tap series\n    // needed to stop the playing in any moment\n    this.cpuInterval = null;\n    this.on = false; // Is the Simon device turned on?\n    this.mode = 0;  // actual mode game (index of «modes» array)\n    this.strict = false;  // additive mode: after an user mistake, game resets\n    this.started = false; // is the game started?\n    this.turn = 0;  // turn being played\n    this.turns = getTurns();  // total turns of the game\n    this.start = function() {  // start the game, when pressed «start»\n      modesBtn.removeEventListener('click', processFunctionButton);\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.taps = [];  // storage of the moves played\n    this.currentPlayerTap = null;  // last music button pressed by the user\n    this.playerMiss = false;  // the user has made a mistake\n    this.cpuTurn = function() {  // process the cpu turn\n      self.turn++;\n      if (!self.gameEnded()) {\n        status.textContent = \"CPU turn\";\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n          updateLed(self.turn);\n        }\n        self.playerMiss = false;\n        var tap = 0;\n        musicBtns.forEach(disableMusicBtns);\n        // interval that plays the actual serie of buttons\n        self.cpuInterval = window.setInterval(play, 600, self.cpuInterval);\n      } else {\n        status.textContent = \"YOU WIN!!\";\n        return;\n      }\n      function play() {  // play a music button\n        snds[self.taps[tap]].play();\n        tap++;\n        if ((tap >= self.turn)) {\n          window.clearInterval(self.cpuInterval);\n          self.cpuInterval = null;\n          window.setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function() {  // process the player turn\n      status.textContent = \"Your turn\";\n      musicBtns.forEach(enableMusicBtns);\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      for (let btn of musicBtns) {\n        btn.addEventListener('click', processMusicTap);\n      }\n    };\n    this.gameEnded = function() {  // return true if game ends, false otherwise\n      return (self.turn > self.turns);\n    };\n\n    // helper functions\n    function playingMusicButton(e) {  // what to do when music of button starts\n      function playing() {\n        e.classList.add('pushed');\n      }\n      return playing;\n    }\n    function unpressButton(e) {  // what to do when music of button ends\n      function unpressed() {\n        e.classList.remove('pushed');\n      }\n      return unpressed;\n    }\n    function unpressed(e) {\n      e.classList.remove('pushed');\n    }\n    function onSoundLoaded(e) {  // run when all sounds are ready\n      var id = e.id;\n      snds[id] = cs.createInstance(id);\n      var snd = snds[id];\n      snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n      snd.on(\"complete\", unpressButton(musicBtns[id]));\n    }\n    function getTurns() {  // return total turns to play, according to game mode\n      return (self.mode === 0)? 20: Infinity;\n    }\n    function getRandomTap() {  // return random button to tap next (number 0-3)\n        return String(Math.floor(Math.random()*4));\n    }\n    function processFunctionButton(e) {  // execute action related to pushed btn\n      switch (e.target.id) {\n        case 'start':\n          if (self.started) {\n            resetGame();\n          } else {\n            self.start();\n          }\n          break;\n        case 'strict':\n          if (self.strict) {\n            self.strict = false;\n            strictBtn.classList.remove('pushed');\n            strictLabel.textContent= \"\";\n          } else {\n            self.strict = true;\n            strictBtn.classList.add('pushed');\n            strictLabel.textContent= \"(Strict)\";\n          }\n          break;\n        default:\n          self.mode = (self.mode === modes.length - 1)? 0: self.mode + 1;\n          modeLabel.textContent = modes[self.mode];\n          self.turns = getTurns();\n      }\n    }\n    function enableMusicBtns(e) {  // enable music buttons (could be clicked)\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n      }\n    }\n    function disableMusicBtns(e) {  // disable music buttons\n      if (!e.hasAttribute('disabled')) {\n        e.setAttribute('disabled','true');\n      }\n    }\n    function togglePower(e){  // toggle power button ON/OFF\n      self.on = (self.on)? false: true;\n      if (self.on) {\n        status.textContent = \"On\";\n        powerBtn.classList.add('right');\n        for (let btn of [startBtn, strictBtn, modesBtn]) {\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        status.textContent = \"Off\";\n        powerBtn.classList.remove('right');\n        stopGame();\n      }\n    }\n    function musicTapError() {  // what to do when user make a mistake\n      status.textContent = \"YOU MISS!!\";\n      if (self.strict) {\n        resetGame();\n      } else {\n        self.playerMiss = true;\n        self.turn--;\n        window.setTimeout(self.cpuTurn, 200);\n      }\n    }\n    function processMusicTap(e) {  // process the tap of a music button\n      var tapped = e.target.getAttribute(\"data-btn\");\n      var snd = snds[tapped];\n      snd.play();\n      snd.on('complete', function(){\n        if (tapped === self.taps[self.currentPlayerTap]) {\n          self.currentPlayerTap++;\n          if (self.currentPlayerTap === self.turn) {\n            for (let btn of musicBtns) {\n              btn.removeEventListener('click', processMusicTap);\n            }\n            window.setTimeout(self.cpuTurn, 200);\n          }\n        } else {\n          for (let btn of musicBtns) {\n            btn.removeEventListener('click', processMusicTap);\n          }\n          musicTapError();\n        }\n      }, null, true);\n    }\n    function updateLed(value=\"--\") {  // update the led value\n      led.textContent = value;\n    }\n    function baseReset(){  // prepare the device for a reset (or power off)\n      window.clearInterval(self.cpuInterval);\n      self.cpuInterval = null;\n      cs.stop();\n      musicBtns.forEach(unpressed);\n      // remove music buttons listeners on reset, to avoid duplicity\n      for (let btn of musicBtns) {\n        btn.removeEventListener('click', processMusicTap);\n      }\n      updateLed();\n      self.turn = 0;\n      self.taps = [];\n      self.currentPlayerTap = null;\n      self.playerMiss = false;\n    }\n    function stopGame() {  // stop (and power off) the device\n      baseReset();\n      for (let btn of [startBtn, strictBtn]) {\n        btn.removeEventListener('click', processFunctionButton);\n      }\n      self.on = false;\n      self.started = false;\n      modesBtn.addEventListener('click', processFunctionButton);\n    }\n    function resetGame() {  // restart the game, with a new sequence of sounds\n      baseReset();\n      self.on = true;\n      self.start();\n    }\n  };\n\n  // launch the game\n  var simonGame = new simon();\n})();\n"],"sourceRoot":"/source/"}