{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","playingMusicButton","playing","classList","add","unpressButton","unpressed","remove","onSoundLoaded","id","snds","cs","createInstance","snd","on","musicBtns","_arr","_i","document","getElementById","assetPath","sounds","src","createjs","Sound","alternateExtensions","registerSounds","simon","getRandomTap","String","Math","floor","random","processFunctionButton","console","log","target","self","started","resetGame","start","strict","enableMusicBtns","hasAttribute","removeAttribute","disableMusicBtns","setAttribute","togglePower","_arr2","startBtn","strictBtn","_i2","btn","addEventListener","stopGame","musicTapError","playerMiss","turn","window","setTimeout","cpuTurn","processMusicTap","currentPlayerTap","tapped","getAttribute","play","taps","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","value","removeEventListener","err","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","updateLed","arguments","led","textContent","baseReset","clearInterval","cpuInterval","stop","forEach","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_arr3","_i3","powerBtn","this","mode","turns","Infinity","tap","playerTurn","gameEnded","push","setInterval","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n(function () {\n  function playingMusicButton(e) {\n    // what to do when music of button starts\n    function playing() {\n      e.classList.add('pushed');\n    }\n    return playing;\n  }\n  function unpressButton(e) {\n    // what to do when music of button ends\n    function unpressed() {\n      e.classList.remove('pushed');\n    }\n    return unpressed;\n  }\n  function unpressed(e) {\n    e.classList.remove('pushed');\n  }\n\n  // get the music buttons\n  var musicBtns = [];\n  var _arr = [0, 1, 2, 3];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var i = _arr[_i];\n    musicBtns[i] = document.getElementById(\"tap\" + i);\n  }\n\n  // create and load the sounds\n  var assetPath = \"/assets/audio/\";\n  var sounds = [{ id: \"0\", src: \"tap0.ogg\" }, { id: \"1\", src: \"tap1.ogg\" }, { id: \"2\", src: \"tap2.ogg\" }, { id: \"3\", src: \"tap3.ogg\" }];\n  var cs = createjs.Sound;\n  cs.alternateExtensions = [\"mp3\"];\n  cs.on(\"fileload\", onSoundLoaded);\n  cs.registerSounds(sounds, assetPath);\n  var snds = [];\n  function onSoundLoaded(e) {\n    // run when all sounds are ready\n    var id = e.id;\n    snds[id] = cs.createInstance(id);\n    var snd = snds[id];\n    snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n    snd.on(\"complete\", unpressButton(musicBtns[id]));\n  }\n\n  // simon device function\n  var simon = function simon() {\n    var powerBtn = document.getElementById('power');\n    var startBtn = document.getElementById('start');\n    var strictBtn = document.getElementById('strict');\n    var led = document.getElementById('led');\n    var self = this;\n    this.cpuInterval = null;\n    powerBtn.addEventListener('click', togglePower);\n    this.on = false; // Is the Simon device turned on?\n    this.mode = \"Normal\"; // Modes available: Normal, Survivor\n    this.strict = false; // Additive mode: after a fail, the game resets\n    this.started = false; // Is the Simon game started?\n    this.turn = 0;\n    this.turns = self.mode === \"Normal\" ? 20 : Infinity; // debe ser 20, pruebas\n    this.start = function () {\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.taps = [];\n    this.currentPlayerTap = null;\n    this.playerMiss = false;\n    this.cpuTurn = function () {\n      self.turn++;\n      if (!self.gameEnded()) {\n        console.log(\"entra cpu turn\");\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n          updateLed(self.turn);\n        }\n        self.playerMiss = false;\n        console.log(self.taps);\n        var tap = 0;\n        musicBtns.forEach(disableMusicBtns);\n        self.cpuInterval = window.setInterval(play, 600, self.cpuInterval);\n      } else {\n        console.log(\"Game ended\");\n        return;\n      }\n      function play() {\n        console.log(self.turn + \" \" + tap);\n        console.log(self.taps);\n        console.log(tap);\n        snds[self.taps[tap]].play();\n        tap++;\n        console.log(\"turn \" + self.turn + \" tap \" + tap);\n        if (tap >= self.turn) {\n          window.clearInterval(self.cpuInterval);\n          self.cpuInterval = null;\n          window.setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function () {\n      console.log(\"Entra player\");\n      musicBtns.forEach(enableMusicBtns);\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      // declare actions to trigger when a music button is pressed\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = musicBtns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var btn = _step.value;\n\n          btn.addEventListener('click', processMusicTap);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n    this.gameEnded = function () {\n      return self.turn > self.turns;\n    };\n\n    // helper functions\n    function getRandomTap() {\n      return String(Math.floor(Math.random() * 4));\n    }\n    function processFunctionButton(e) {\n      console.log(\"pulsado \" + e.target.id);\n      switch (e.target.id) {\n        case 'start':\n          if (self.started) {\n            resetGame();\n          } else {\n            self.start();\n          }\n          break;\n        default:\n          self.strict = self.strict ? false : true;\n      }\n    }\n    function enableMusicBtns(e) {\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n      }\n    }\n    function disableMusicBtns(e) {\n      if (!e.hasAttribute('disabled')) {\n        e.setAttribute('disabled', 'true');\n      }\n    }\n    function togglePower(e) {\n      console.log(\"pulsado \" + e.target.id);\n      self.on = self.on ? false : true;\n      if (self.on) {\n        console.log(\"Power on\");\n        var _arr2 = [startBtn, strictBtn];\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var btn = _arr2[_i2];\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        console.log(\"Power off\");\n        stopGame();\n      }\n    }\n    function musicTapError() {\n      console.log(\"You didn't tap any button or tap the wrong one\");\n      console.log(self.strict);\n      if (self.strict) {\n        resetGame();\n      } else {\n        self.playerMiss = true;\n        self.turn--;\n        window.setTimeout(self.cpuTurn, 200);\n      }\n    }\n    function processMusicTap(e) {\n      console.log(\"Se ejecuta processMusicTap\");\n      console.log(e);\n      console.log(musicBtns);\n      console.log(\"playerTap: \" + self.currentPlayerTap);\n      var tapped = e.target.getAttribute(\"data-btn\");\n      var snd = snds[tapped];\n      snd.play();\n      snd.on('complete', function () {\n        console.log(\"Al completar sonido → tapped: \" + tapped + \" taps[\" + self.currentPlayerTap + \"]: \" + self.taps[self.currentPlayerTap] + \" turn: \" + self.turn);\n        if (tapped === self.taps[self.currentPlayerTap]) {\n          console.log(\"Correct button pressed\");\n          self.currentPlayerTap++;\n          console.log(\"playerTap: \" + self.currentPlayerTap, \"turn: \" + self.turn);\n          if (self.currentPlayerTap === self.turn) {\n            console.log(\"Lista de taps mostrada al completar sonido y alcanzar el final del turno del jugador:\");\n            console.log(self.taps);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = musicBtns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var btn = _step2.value;\n\n                btn.removeEventListener('click', processMusicTap);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            window.setTimeout(self.cpuTurn, 200);\n          }\n        } else {\n          console.log(\"Al completar el sonido y pulsarse botón erroneamente, tapped !== self.taps[playerTap] →  tapped: \" + tapped + \" taps[\" + self.currentPlayerTap + \"]: \" + self.taps[self.currentPlayerTap] + \" turn: \" + self.turn);\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = musicBtns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var btn = _step3.value;\n\n              btn.removeEventListener('click', processMusicTap);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          musicTapError();\n        }\n      }, null, true);\n    }\n    function updateLed() {\n      var value = arguments.length <= 0 || arguments[0] === undefined ? \"--\" : arguments[0];\n\n      led.textContent = value;\n    }\n    function baseReset() {\n      window.clearInterval(self.cpuInterval);\n      self.cpuInterval = null;\n      cs.stop();\n      musicBtns.forEach(unpressed);\n      // borrar los escuchadores de eventos click\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = musicBtns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var btn = _step4.value;\n\n          btn.removeEventListener('click', processMusicTap);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      updateLed();\n      self.turn = 0;\n      self.taps = [];\n      self.currentPlayerTap = null;\n      self.playerMiss = false;\n    }\n    function stopGame() {\n      baseReset();\n      var _arr3 = [startBtn, strictBtn];\n      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n        var btn = _arr3[_i3];\n        btn.removeEventListener('click', processFunctionButton);\n      }\n      self.on = false;\n      self.started = false;\n    }\n    function resetGame() {\n      baseReset();\n      self.on = true;\n      self.start();\n    }\n  };\n\n  // launch the game\n  var simonGame = new simon();\n})();\n\n},{}]},{},[1])\n\n","(function(){\n  function playingMusicButton(e) {  // what to do when music of button starts\n    function playing() {\n      e.classList.add('pushed');\n    }\n    return playing;\n  }\n  function unpressButton(e) {  // what to do when music of button ends\n    function unpressed() {\n      e.classList.remove('pushed');\n    }\n    return unpressed;\n  }\n  function unpressed(e) {\n    e.classList.remove('pushed');\n  }\n\n  // get the music buttons\n  var musicBtns = [];\n  for (let i of [0,1,2,3]) {\n    musicBtns[i] = document.getElementById(\"tap\"+i);\n  }\n\n  // create and load the sounds\n  var assetPath = \"/assets/audio/\";\n  var sounds = [\n    {id: \"0\", src: \"tap0.ogg\"},\n    {id: \"1\", src: \"tap1.ogg\"},\n    {id: \"2\", src: \"tap2.ogg\"},\n    {id: \"3\", src: \"tap3.ogg\"}\n  ];\n  var cs = createjs.Sound;\n  cs.alternateExtensions = [\"mp3\"];\n  cs.on(\"fileload\", onSoundLoaded);\n  cs.registerSounds(sounds, assetPath);\n  var snds = [];\n  function onSoundLoaded(e) {\n    // run when all sounds are ready\n    var id = e.id;\n    snds[id] = cs.createInstance(id);\n    var snd = snds[id];\n    snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n    snd.on(\"complete\", unpressButton(musicBtns[id]));\n  }\n\n  // simon device function\n  var simon = function() {\n    var powerBtn = document.getElementById('power');\n    var startBtn = document.getElementById('start');\n    var strictBtn = document.getElementById('strict');\n    var  led = document.getElementById('led');\n    var self = this;\n    this.cpuInterval = null;\n    powerBtn.addEventListener('click', togglePower);\n    this.on = false; // Is the Simon device turned on?\n    this.mode = \"Normal\"; // Modes available: Normal, Survivor\n    this.strict = false;  // Additive mode: after a fail, the game resets\n    this.started = false; // Is the Simon game started?\n    this.turn = 0;\n    this.turns = (self.mode === \"Normal\")? 20: Infinity; // debe ser 20, pruebas\n    this.start = function() {\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.taps = [];\n    this.currentPlayerTap = null;\n    this.playerMiss = false;\n    this.cpuTurn = function() {\n      self.turn++;\n      if (!self.gameEnded()) {\n        console.log(\"entra cpu turn\");\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n          updateLed(self.turn);\n        }\n        self.playerMiss = false;\n        console.log(self.taps);\n        var tap = 0;\n        musicBtns.forEach(disableMusicBtns);\n        self.cpuInterval = window.setInterval(play, 600, self.cpuInterval);\n      } else {\n        console.log(\"Game ended\");\n        return;\n      }\n      function play() {\n        console.log(self.turn + \" \"+ tap);\n        console.log(self.taps);\n        console.log(tap);\n        snds[self.taps[tap]].play();\n        tap++;\n        console.log(\"turn \" + self.turn + \" tap \"+ tap);\n        if ((tap >= self.turn)) {\n          window.clearInterval(self.cpuInterval);\n          self.cpuInterval = null;\n          window.setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function() {\n      console.log(\"Entra player\");\n      musicBtns.forEach(enableMusicBtns);\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      // declare actions to trigger when a music button is pressed\n      for (let btn of musicBtns) {\n        btn.addEventListener('click', processMusicTap);\n      }\n    };\n    this.gameEnded = function() {\n      return (self.turn > self.turns);\n    };\n\n    // helper functions\n    function getRandomTap() {\n        return String(Math.floor(Math.random()*4));\n    }\n    function processFunctionButton(e) {\n      console.log(\"pulsado \"+ e.target.id);\n      switch (e.target.id) {\n        case 'start':\n          if (self.started) {\n            resetGame();\n          } else {\n            self.start();\n          }\n          break;\n        default:\n          self.strict = (self.strict)? false: true;\n      }\n    }\n    function enableMusicBtns(e) {\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n      }\n    }\n    function disableMusicBtns(e) {\n      if (!e.hasAttribute('disabled')) {\n        e.setAttribute('disabled','true');\n      }\n    }\n    function togglePower(e){\n      console.log(\"pulsado \" + e.target.id);\n      self.on = (self.on)? false: true;\n      if (self.on) {\n        console.log(\"Power on\");\n        for (let btn of [startBtn, strictBtn]) {\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        console.log(\"Power off\");\n        stopGame();\n      }\n    }\n    function musicTapError() {\n      console.log(\"You didn't tap any button or tap the wrong one\");\n      console.log(self.strict);\n      if (self.strict) {\n        resetGame();\n      } else {\n        self.playerMiss = true;\n        self.turn--;\n        window.setTimeout(self.cpuTurn, 200);\n      }\n    }\n    function processMusicTap(e) {\n      console.log(\"Se ejecuta processMusicTap\");\n      console.log(e);\n      console.log(musicBtns);\n      console.log(\"playerTap: \" + self.currentPlayerTap);\n      var tapped = e.target.getAttribute(\"data-btn\");\n      var snd = snds[tapped];\n      snd.play();\n      snd.on('complete', function(){\n        console.log(\"Al completar sonido → tapped: \"+tapped+\" taps[\"+self.currentPlayerTap+\"]: \"+self.taps[self.currentPlayerTap] +\" turn: \"+ self.turn);\n        if (tapped === self.taps[self.currentPlayerTap]) {\n          console.log(\"Correct button pressed\");\n          self.currentPlayerTap++;\n          console.log(\"playerTap: \" + self.currentPlayerTap, \"turn: \"+ self.turn);\n          if (self.currentPlayerTap === self.turn) {\n            console.log(\"Lista de taps mostrada al completar sonido y alcanzar el final del turno del jugador:\");\n            console.log(self.taps);\n            for (let btn of musicBtns) {\n              btn.removeEventListener('click', processMusicTap);\n            }\n            window.setTimeout(self.cpuTurn, 200);\n          }\n        } else {\n          console.log(\"Al completar el sonido y pulsarse botón erroneamente, tapped !== self.taps[playerTap] →  tapped: \"+tapped+\" taps[\"+self.currentPlayerTap+\"]: \"+self.taps[self.currentPlayerTap] +\" turn: \"+ self.turn);\n          for (let btn of musicBtns) {\n            btn.removeEventListener('click', processMusicTap);\n          }\n          musicTapError();\n        }\n      }, null, true);\n    }\n    function updateLed(value=\"--\") {\n      led.textContent = value;\n    }\n    function baseReset(){\n      window.clearInterval(self.cpuInterval);\n      self.cpuInterval = null;\n      cs.stop();\n      musicBtns.forEach(unpressed);\n      // borrar los escuchadores de eventos click\n      for (let btn of musicBtns) {\n        btn.removeEventListener('click', processMusicTap);\n      }\n      updateLed();\n      self.turn = 0;\n      self.taps = [];\n      self.currentPlayerTap = null;\n      self.playerMiss = false;\n    }\n    function stopGame() {\n      baseReset();\n      for (let btn of [startBtn, strictBtn]) {\n        btn.removeEventListener('click', processFunctionButton);\n      }\n      self.on = false;\n      self.started = false;\n    }\n    function resetGame() {\n      baseReset();\n      self.on = true;\n      self.start();\n    }\n  };\n\n  // launch the game\n  var simonGame = new simon();\n})();\n"],"sourceRoot":"/source/"}