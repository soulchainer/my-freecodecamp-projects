{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","playingMusicButton","playing","classList","add","unpressButton","unpressed","remove","onSoundLoaded","id","snds","cs","createInstance","snd","on","musicBtns","game","simonGame","simon","start","_arr","_i","document","getElementById","assetPath","sounds","src","createjs","Sound","alternateExtensions","registerSounds","getRandomTap","String","Math","floor","random","processFunctionButton","target","self","restart","strict","toggleDisabled","hasAttribute","removeAttribute","console","log","setAttribute","power","this","mode","started","turn","turns","Infinity","togglePower","_arr2","_i2","btn","addEventListener","_arr3","_i3","removeEventListener","cpuTurn","taps","currentPlayerTap","playerMiss","play","interval","tap","clearInterval","round","forEach","setTimeout","playerTurn","gameEnded","push","setInterval","musicTapError","processMusicTap","tapped","getAttribute","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n(function () {\n  function playingMusicButton(e) {\n    // what to do when music of button starts\n    function playing() {\n      e.classList.add('pushed');\n    }\n    return playing;\n  }\n  function unpressButton(e) {\n    // what to do when music of button ends\n    function unpressed() {\n      e.classList.remove('pushed');\n    }\n    return unpressed;\n  }\n\n  // get the music buttons\n  var musicBtns = [];\n  var _arr = [0, 1, 2, 3];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var i = _arr[_i];\n    musicBtns[i] = document.getElementById(\"tap\" + i);\n  }\n\n  // create and load the sounds\n  var assetPath = \"/assets/audio/\";\n  var sounds = [{ id: \"0\", src: \"tap0.ogg\" }, { id: \"1\", src: \"tap1.ogg\" }, { id: \"2\", src: \"tap2.ogg\" }, { id: \"3\", src: \"tap3.ogg\" }];\n  var cs = createjs.Sound;\n  cs.alternateExtensions = [\"mp3\"];\n  cs.on(\"fileload\", onSoundLoaded);\n  cs.registerSounds(sounds, assetPath);\n  var snds = [];\n  function onSoundLoaded(e) {\n    // run when all sounds are ready\n    var id = e.id;\n    snds[id] = cs.createInstance(id);\n    var snd = snds[id];\n    snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n    snd.on(\"complete\", unpressButton(musicBtns[id]));\n  }\n\n  // simon device function\n  var simon = function simon() {\n    function getRandomTap() {\n      return String(Math.floor(Math.random() * 4));\n    }\n    function processFunctionButton(e) {\n      switch (e.target.id) {\n        case 'power':\n          self.on = false;\n          break;\n        case 'start':\n          self.restart();\n          break;\n        default:\n          self.strict = true;\n      }\n    }\n    function toggleDisabled(e) {\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n        console.log(\"enabled\");\n      } else {\n        e.setAttribute('disabled', 'true');\n        console.log(\"disabled\");\n      }\n    }\n    var power = document.getElementById('power');\n    var start = document.getElementById('start');\n    var strict = document.getElementById('strict');\n    var self = this;\n\n    this.on = true; // Is the Simon device turned on?\n    this.mode = \"Normal\"; // Modes available: Normal, Survivor\n    this.strict = false; // Additive mode: after a fail, the game resets\n    this.started = false; // Is the Simon game started?\n    this.turn = 0;\n    this.turns = self.mode === \"Normal\" ? 20 : Infinity; // debe ser 20, pruebas\n    this.togglePower = function () {\n      self.on = self.on ? false : true;\n      if (self.on) {\n        var _arr2 = [power, start, strict];\n\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var btn = _arr2[_i2];\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        var _arr3 = [power, start, strict];\n\n        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n          var btn = _arr3[_i3];\n          btn.removeEventListener('click', processFunctionButton);\n        }\n      }\n    };\n    this.start = function () {\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.restart = game;\n    this.taps = [];\n    this.currentPlayerTap = null;\n    this.playerMiss = false;\n    this.cpuTurn = function () {\n      self.turn++;\n      if (!self.gameEnded()) {\n        console.log(\"entra cpu turn\");\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n        }\n        if (self.playerMiss) {\n          self.playerMiss = false;\n        }\n        console.log(self.taps);\n        var tap = 0;\n        musicBtns.forEach(toggleDisabled);\n        var round = setInterval(play, 600, round);\n      } else {\n        console.log(\"Game ended\");\n        return;\n      }\n      function play(interval) {\n        console.log(self.turn + \" \" + tap);\n        console.log(self.taps);\n        console.log(tap);\n        snds[self.taps[tap]].play();\n        tap++;\n        if (tap >= self.turn) {\n          clearInterval(round);\n          musicBtns.forEach(toggleDisabled);\n          setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function () {\n      function musicTapError() {\n        console.log(\"You didn't tap any button or tap the wrong one\");\n        self.turn = self.strict ? 0 : --self.turn;\n        self.playerMiss = true;\n        setTimeout(self.cpuTurn, 200);\n      }\n      function processMusicTap(e) {\n        console.log(\"Se ejecuta processMusicTap\");\n        console.log(e);\n        console.log(musicBtns);\n        console.log(\"playerTap: \" + self.currentPlayerTap);\n        var tapped = e.target.getAttribute(\"data-btn\");\n        var snd = snds[tapped];\n        snd.play();\n        snd.on('complete', function () {\n          console.log(\"Al completar sonido → tapped: \" + tapped + \" taps[\" + self.currentPlayerTap + \"]: \" + self.taps[self.currentPlayerTap] + \" turn: \" + self.turn);\n          if (tapped === self.taps[self.currentPlayerTap]) {\n            console.log(\"Correct button pressed\");\n            self.currentPlayerTap++;\n            console.log(\"playerTap: \" + self.currentPlayerTap, \"turn: \" + self.turn);\n            if (self.currentPlayerTap === self.turn) {\n              console.log(\"Lista de taps mostrada al completar sonido y alcanzar el final del turno del jugador:\");\n              console.log(self.taps);\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = musicBtns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var btn = _step.value;\n\n                  btn.removeEventListener('click', processMusicTap);\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              setTimeout(self.cpuTurn, 200);\n            }\n          } else {\n            console.log(\"Al completar el sonido y pulsarse botón erroneamente, tapped !== self.taps[playerTap] →  tapped: \" + tapped + \" taps[\" + self.currentPlayerTap + \"]: \" + self.taps[self.currentPlayerTap] + \" turn: \" + self.turn);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = musicBtns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var btn = _step2.value;\n\n                btn.removeEventListener('click', processMusicTap);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            musicTapError();\n          }\n        }, null, true);\n      }\n      console.log(\"Entra player\");\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      // declare actions to trigger when a music button is pressed\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = musicBtns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var btn = _step3.value;\n\n          btn.addEventListener('click', processMusicTap);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    };\n    this.gameEnded = function () {\n      return self.turn > self.turns;\n    };\n  };\n  // game function\n  function game() {\n    var simonGame = new simon();\n    simonGame.start();\n  }\n  game();\n})();\n\n},{}]},{},[1])\n\n","(function(){\n  function playingMusicButton(e) {  // what to do when music of button starts\n    function playing() {\n      e.classList.add('pushed');\n    }\n    return playing;\n  }\n  function unpressButton(e) {  // what to do when music of button ends\n    function unpressed() {\n      e.classList.remove('pushed');\n    }\n    return unpressed;\n  }\n\n  // get the music buttons\n  var musicBtns = [];\n  for (let i of [0,1,2,3]) {\n    musicBtns[i] = document.getElementById(\"tap\"+i);\n  }\n\n  // create and load the sounds\n  var assetPath = \"/assets/audio/\";\n  var sounds = [\n    {id: \"0\", src: \"tap0.ogg\"},\n    {id: \"1\", src: \"tap1.ogg\"},\n    {id: \"2\", src: \"tap2.ogg\"},\n    {id: \"3\", src: \"tap3.ogg\"}\n  ];\n  var cs = createjs.Sound;\n  cs.alternateExtensions = [\"mp3\"];\n  cs.on(\"fileload\", onSoundLoaded);\n  cs.registerSounds(sounds, assetPath);\n  var snds = [];\n  function onSoundLoaded(e) {\n    // run when all sounds are ready\n    var id = e.id;\n    snds[id] = cs.createInstance(id);\n    var snd = snds[id];\n    snd.on(\"succeeded\", playingMusicButton(musicBtns[id]));\n    snd.on(\"complete\", unpressButton(musicBtns[id]));\n  }\n\n  // simon device function\n  var simon = function() {\n    function getRandomTap() {\n        return String(Math.floor(Math.random()*4));\n    }\n    function processFunctionButton(e) {\n      switch (e.target.id) {\n        case 'power':\n          self.on = false;\n          break;\n        case 'start':\n          self.restart();\n          break;\n        default:\n          self.strict = true;\n      }\n    }\n    function toggleDisabled(e) {\n      if (e.hasAttribute('disabled')) {\n        e.removeAttribute('disabled');\n        console.log(\"enabled\");\n      } else {\n        e.setAttribute('disabled','true');\n        console.log(\"disabled\");\n      }\n    }\n    var power = document.getElementById('power');\n    var start = document.getElementById('start');\n    var strict = document.getElementById('strict');\n    var self = this;\n\n    this.on = true; // Is the Simon device turned on?\n    this.mode = \"Normal\"; // Modes available: Normal, Survivor\n    this.strict = false;  // Additive mode: after a fail, the game resets\n    this.started = false; // Is the Simon game started?\n    this.turn = 0;\n    this.turns = (self.mode === \"Normal\")? 20: Infinity; // debe ser 20, pruebas\n    this.togglePower = function(){\n      self.on = (self.on)? false: true;\n      if (self.on) {\n        for (let btn of [power, start, strict]) {\n          btn.addEventListener('click', processFunctionButton);\n        }\n      } else {\n        for (let btn of [power, start, strict]) {\n          btn.removeEventListener('click', processFunctionButton);\n        }\n      }\n    };\n    this.start = function() {\n      self.started = true;\n      self.cpuTurn();\n    };\n    this.restart = game;\n    this.taps = [];\n    this.currentPlayerTap = null;\n    this.playerMiss = false;\n    this.cpuTurn = function() {\n      self.turn++;\n      if (!self.gameEnded()) {\n        console.log(\"entra cpu turn\");\n        if (!self.playerMiss || !self.taps.length) {\n          self.taps.push(getRandomTap());\n        }\n        if (self.playerMiss) {\n          self.playerMiss = false;\n        }\n        console.log(self.taps);\n        var tap = 0;\n        musicBtns.forEach(toggleDisabled);\n        var round = setInterval(play, 600, round);\n      } else {\n        console.log(\"Game ended\");\n        return;\n      }\n      function play(interval) {\n        console.log(self.turn + \" \"+ tap);\n        console.log(self.taps);\n        console.log(tap);\n        snds[self.taps[tap]].play();\n        tap++;\n        if (tap >= self.turn) {\n          clearInterval(round);\n          musicBtns.forEach(toggleDisabled);\n          setTimeout(self.playerTurn, 400);\n        }\n      }\n    };\n    this.playerTurn = function() {\n      function musicTapError() {\n        console.log(\"You didn't tap any button or tap the wrong one\");\n        self.turn = (self.strict)? 0: --self.turn;\n        self.playerMiss = true;\n        setTimeout(self.cpuTurn, 200);\n      }\n      function processMusicTap(e) {\n        console.log(\"Se ejecuta processMusicTap\");\n        console.log(e);\n        console.log(musicBtns);\n        console.log(\"playerTap: \" + self.currentPlayerTap);\n        var tapped = e.target.getAttribute(\"data-btn\");\n        var snd = snds[tapped];\n        snd.play();\n        snd.on('complete', function(){\n          console.log(\"Al completar sonido → tapped: \"+tapped+\" taps[\"+self.currentPlayerTap+\"]: \"+self.taps[self.currentPlayerTap] +\" turn: \"+ self.turn);\n          if (tapped === self.taps[self.currentPlayerTap]) {\n            console.log(\"Correct button pressed\");\n            self.currentPlayerTap++;\n            console.log(\"playerTap: \" + self.currentPlayerTap, \"turn: \"+ self.turn);\n            if (self.currentPlayerTap === self.turn) {\n              console.log(\"Lista de taps mostrada al completar sonido y alcanzar el final del turno del jugador:\");\n              console.log(self.taps);\n              for (let btn of musicBtns) {\n                btn.removeEventListener('click', processMusicTap);\n              }\n              setTimeout(self.cpuTurn, 200);\n            }\n          } else {\n            console.log(\"Al completar el sonido y pulsarse botón erroneamente, tapped !== self.taps[playerTap] →  tapped: \"+tapped+\" taps[\"+self.currentPlayerTap+\"]: \"+self.taps[self.currentPlayerTap] +\" turn: \"+ self.turn);\n            for (let btn of musicBtns) {\n              btn.removeEventListener('click', processMusicTap);\n            }\n            musicTapError();\n          }\n        }, null, true);\n      }\n      console.log(\"Entra player\");\n      var taps = self.turn;\n      self.currentPlayerTap = 0;\n      // declare actions to trigger when a music button is pressed\n      for (let btn of musicBtns) {\n        btn.addEventListener('click', processMusicTap);\n      }\n    };\n    this.gameEnded = function() {\n      return (self.turn > self.turns);\n    };\n  };\n  // game function\n  function game() {\n    let simonGame = new simon();\n    simonGame.start();\n  }\n  game();\n})();\n"],"sourceRoot":"/source/"}